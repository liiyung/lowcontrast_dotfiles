# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #



# testing fzf
alt + cmd - space : open -a "$(find /Applications -name '*app' -maxdepth 1 | sed 's|/Applications/||;s|\.app||' | fzf --reverse --preview=)"

# restart yabai
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# kill focused window
cmd - escape  : yabai -m window --close


# fast focus space
shift + alt - x : yabai -m space --focus recent
shift + alt - 1 : yabai -m space --focus 1
shift + alt - 2 : yabai -m space --focus 2
shift + alt - 3 : yabai -m space --focus 3
shift + alt - 4 : yabai -m space --focus 4
shift + alt - 5 : yabai -m space --focus 5
shift + alt - 6 : yabai -m space --focus 6
shift + alt - 7 : yabai -m space --focus 7
shift + alt - 8 : yabai -m space --focus 8
shift + alt - 9 : yabai -m space --focus 9


# (float) "move"
shift + alt - left : yabai -m window --move rel:-5:0
shift + alt - right : yabai -m window --move rel:5:0
shift + alt - up : yabai -m window --move rel:0:-5
shift + alt - down : yabai -m window --move rel:0:5




# change layout of this space
ctrl + alt - b : yabai -m space --layout bsp
ctrl + alt - f : yabai -m space --layout float







# 
#    ad88 88
#   d8"   88                          ,d
#   88    88                          88
# MM88MMM 88  ,adPPYba,  ,adPPYYba, MM88MMM
#   88    88 a8"     "8a ""     `Y8   88
#   88    88 8b       d8 ,adPPPPP88   88
#   88    88 "8a,   ,a8" 88,    ,88   88,
#   88    88  `"YbbdP"'  `"8bbdP"Y8   "Y888



# send window to space x and follow focus
cmd + alt - x : yabai -m window --space recent; yabai -m space --focus recent
cmd + alt - z : yabai -m window --space prev; yabai -m space --focus prev
cmd + alt - c : yabai -m window --space next; yabai -m space --focus next
cmd + alt - 1 : yabai -m window --space  1; yabai -m space --focus 1; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 2 : yabai -m window --space  2; yabai -m space --focus 2; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 3 : yabai -m window --space  3; yabai -m space --focus 3; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 4 : yabai -m window --space  4; yabai -m space --focus 4; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 5 : yabai -m window --space  5; yabai -m space --focus 5; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 6 : yabai -m window --space  6; yabai -m space --focus 6; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 7 : yabai -m window --space  7; yabai -m space --focus 7; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 8 : yabai -m window --space  8; yabai -m space --focus 8; # yabai -m window --grid 20:20:1:1:18:18
cmd + alt - 9 : yabai -m window --space  9; yabai -m space --focus 9; # yabai -m window --grid 20:20:1:1:18:18







# (float) make fullscreen
cmd + shift - up : yabai -m window --grid 1:1:1:1:2:2 && \
                   yabai -m space --create && \
                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                   yabai -m window --space "${index}" && \
                   yabai -m space --focus "${index}"
  

# (float) make minimize
cmd + shift - down : yabai -m window --space 1 && yabai -m space --destroy && yabai -m space --focus 1;\


# FORMAT
# <rows>:<cols>:<start-x>:<start-y>:<width>:<height>
# i don't !#$@#$%#@% know



# (float) "experimental"
alt - x : yabai -m window --grid 16:33:8:2:17:12


# (float) "experimental"
alt - d : yabai -m window --grid 26:36:3:1:30:23 && yabai -m window --move rel:0:5



# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 20:20:1:1:18:18

# (float) "fullscreen"
alt - f : yabai -m window --grid 1:1:1:1:2:2


# (float) "left"
alt - left : yabai -m window --grid 20:14:0:1:11:18 && yabai -m window --move rel:15:0



# (float) native fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen



# 
# 88
# 88
# 88
# 88,dPPYba,  ,adPPYba, 8b,dPPYba,
# 88P'    "8a I8[    "" 88P'    "8a
# 88       d8  `"Y8ba,  88       d8
# 88b,   ,a8" aa    ]8I 88b,   ,a8"
# 8Y"Ybbd8"'  `"YbbdP"' 88`YbbdP"'
#                       88
#                       88
# 

# (bsp) change focus
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east
# (alt) change focus (using arrow keys)
cmd + alt - left  : yabai -m window --focus west
cmd + alt - down  : yabai -m window --focus south
cmd + alt - up    : yabai -m window --focus north
cmd + alt - right : yabai -m window --focus east



# (bsp) create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# cmd + shift - up : yabai -m space --create && \
                    # index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                    # yabai -m window --space "${index}" && \
                    # yabai -m space --focus "${index}"

# (bsp) swap current window location
cmd + shift - left : yabai -m window --swap west
cmd + shift - right : yabai -m window --swap east



# (bsp) toggle window zoom 
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# (bsp) increase window size
# control window size, modified to be intuitive
cmd + ctrl - left : yabai -m window --resize left:-20:0;yabai -m window --resize right:-20:0
cmd + ctrl - right : yabai -m window --resize right:20:0;yabai -m window --resize left:20:0
cmd + ctrl - up : yabai -m window --resize bottom:0:20;yabai -m window --resize top:0:20
cmd + ctrl - down : yabai -m window --resize top:0:-20;yabai -m window --resize bottom:0:-20
cmd + ctrl - e : yabai -m space --balance






#  8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888
#
#  8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888 8888888888


# open terminal
# cmd - return : /Applications/iTerm.app/Contents/MacOS/iTerm2 --single-instance -d ~


# toggle window zoom (float)
# alt - f : /usr/local/Cellar/yabai/scripts/toggleFloatFullscreen.sh




# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20


# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1


# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20


# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 20:20:1:1:18:18

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip
